extends layouts/app.jade

block title
  title API Reference - #{pkg.name}
  
block content
  :markdown-it
    ## Options
    
    Pass options to constructor to create new instance
    
    ```js
    let module = new SimpleModule({
      optionName: optionValue
    });
    ```
    
  p.api-item
    a.anchor(id='option-plugins', href='#option-plugins')
      include ./includes/anchor-icon.jade
    b.name plugins
    code Array
    span.default default: [ ]
    
  :markdown-it
    Specify the plugins to be used on the new instance. The plugins passing to the constructor need to be registered by class method [plugin(name, cls)](#class-method-plugins),
    and SimpleModule will create instance for each plugin, and pass its own instance as the only param to plugin's constructor:
    
    ```js
    class TestPlugin extends SimpleModule {
      constructor(module) {
        super()
        this.module = module;
        this.test = true
      }
    }
    
    SimpleModule.plugin('testPlugin', TestPlugin);
    ```
    
    The instance created with `plugins` option will have a `plugins` instance properties containing all plugin instance:
    
    ```js
    let module = new SimpleModule({
      plugins: ['testPlugin']
    });
    
    module.plugins['testPlugin'].test // true
    ```
  
    ## Instance Methods
  
    Invoke instance class method on SimpleModule instance:
  
    ```js
    let module = new SimpleModule()
    module.instanceMethod()
    ```
      
  p.api-item
    a.anchor(id='instance-method-on', href='#instance-method-on')
      include ./includes/anchor-icon.jade
    b.name on
    span.params (#[span.param eventName]#[code String],#[span.param listener]#[code Function])
    span.return return: self
    
  :markdown-it
    Add a event listener for the specified event. The first param `eventName` supports namespaces and wildcards.
    
  p.api-item
    a.anchor(id='instance-method-one', href='#instance-method-one')
      include ./includes/anchor-icon.jade
    b.name one
    span.params (#[span.param eventName]#[code String],#[span.param listener]#[code Function])
    span.return return: self
    
  :markdown-it
    Add a one time event listener for the specified event. The listener will be invoked the first time the event is fired, then it will be removed.
    
  p.api-item
    a.anchor(id='instance-method-off', href='#instance-method-off')
      include ./includes/anchor-icon.jade
    b.name off
    span.params (#[span.param eventName]#[code String], [#[span.param listener]#[code Function]] )
    span.return return: self
    
  :markdown-it
    Remove a specified listener from the listener array of `eventName`, or remove all listeners of `evenName` if no listener specified.
    
  p.api-item
    a.anchor(id='instance-method-trigger', href='#instance-method-trigger')
      include ./includes/anchor-icon.jade
    b.name trigger
    span.params (#[span.param eventName]#[code String])
    span.return return: self
    
  :markdown-it
    Fire a specified event. All listeners binded to the event will be invoked in order.
    
    SimpleModule inherits from EventEmitter2, so you can invoke all method of EventEmitter2 directly on SimpleModule. Check [EventEmitter2 API](https://github.com/asyncly/EventEmitter2#api) for more information.
  
    ## Class Methods
    
    Invoke methods on SimpleModule class:
    
    ```js
    SimpleModule.classMethod()
    ```
    
  p.api-item
    a.anchor(id='class-method-extend', href='#instance-method-extend')
      include ./includes/anchor-icon.jade
    b.name extend
    span.params (#[span.param obj]#[code Object])
    span.return return: self
    
  :markdown-it
    Add class properties to SimpleModule class.
    
  p.api-item
    a.anchor(id='class-method-include', href='#instance-method-include')
      include ./includes/anchor-icon.jade
    b.name include
    span.params (#[span.param obj]#[code Object])
    span.return return: self
    
  :markdown-it
    Add instance properties to SimpleModule instance.
    
  p.api-item
    a.anchor(id='class-method-plugin', href='#instance-method-plugin')
      include ./includes/anchor-icon.jade
    b.name include
    span.params (#[span.param pluginName]#[code String], #[span.param pluginClass]#[code Function])
    span.return return: self
    
  :markdown-it
    Register plugin for SimpleModule. The plugin class is recommended to inherit from SimpleModule.
    
  
